
import { Lazy } from '../../functionalInterfaces';
import { GlobalAssignee } from '../task/taskInterface';
import { Dispatch, SetStateAction } from 'react';


export interface FetchResponseProjects {
  data:         Projects[];
  recordsCount: number;
}

export interface Projects {
  id:                              number;
  funderId:                        number;
  creationDate:                    Date;
  projectName:                     string;
  description:                     string;
  priorityId:                      number;
  stateId:                         number;
  plannedStartDate:                Date;
  plannedEndDate:                  Date;
  createdBy:                       number;
  assignedTo:                      number;
  workFlowId:                      number;
  inactive:                        boolean;
  isDeleted:                       boolean;
  director:                        number;
  initiativeId:                    number;
  projectDonorName:                string;
  deliverables:                    null;
  projectBanner:                   null;
  organizationalChartImage:        null;
  report:                          string;
  totalBudget:                     number;
  nameAssignedTo:                  string;
  directorName:                    string;
  nameCreatedBy:                   string;
  funder:                          Funder;
  initiative:                      Funder;
  usersInProjects:                 UserInProject[];
  projectLocations:                ProjectLocation[];
  funderContactsInProjects:        any[];
  projectsInterventionsInProjects: any[];
}

export interface Funder {
  id:        number;
  name:      string;
  isDeleted: boolean;
}

export interface ProjectLocation {
  locationId: number;
  country:    string;
  state:      string;
  county:     string;
  region:     string;
  city:       string;
  zipCode:    number;
  showDialog?:boolean;
  setShowDialog:Dispatch<SetStateAction<boolean>>
}

// Generated by https://quicktype.io

export interface ProjectCreate {
  funderId:                 number | string;
  projectName:              string;
  description:              string;
  priorityId:               string;
  stateId:                  string;
  plannedStartDate:         Date;
  plannedEndDate:           Date;
  assignedTo:               string;
  workFlowId:               number;
  inactive:                 boolean;
  isDeleted:                boolean;
  director:                 string;
  initiativeId:             string | number;
  projectDonorName:         string;
  //TODO: DEFINIR INPUT
  deliverables:             string;
  //TODO: DEFINIR INPUT
  projectBanner:            string;
  //TODO: DEFINIR INPUT
  organizationalChartImage: string;
  report:                   string;
  totalBudget:              number | null | undefined;
  funderContactId: number;

}

export interface ProjectUpdate {
  id:                       number;
  funderId:                 number;
  projectName:              string;
  description:              string;
  priorityId:               string | number;
  stateId:                  string | number;
  plannedStartDate:         Date;
  plannedEndDate:           Date;
  assignedTo:               string | number;
  workFlowId:               number;
  inactive:                 boolean;
  isDeleted:                boolean;
  director:                 string | number;
  initiativeId:             number | null | undefined;
  projectDonorName:         string;
  deliverables:             string;
  projectBanner:            string;
  organizationalChartImage: string;
  report:                   string;
  totalBudget:              number | null | undefined;
}



export interface CreatorProjects {
  id: number,
  customerId: string,
  projectName: string,
  description: string,
  creationDate: Date,
  priorityId: string,
  stateId: string,
  plannedStartDate: Date,
  plannedEndDate: Date,
  createdBy: number,
  workFlowId: number,
  assignedTo: string,
  inactive: boolean,
  isDeleted: boolean,
  director: string,
  country: string,
  state: string,
  city: string,
  region: string,
  county: string,
  initiative: string,
  internalCode: string,
  customer: Customer[],
  stateNavigation: stateNavigation[];
  usersInProjects: UserInProject[];
  favorite: boolean;
  funderId: number;
  funderContactId: number;
}

export interface BookMarks {
  id: number,
  userId: number,
  bookmarkedElementType: string,
  bookmarkedElementId: number,
}

export interface Customer {
  id: number,
  name: "string",
  isactive: boolean,
  isDeleted: boolean,
  projects: [
    "string"
  ]
}
export interface stateNavigation {
  id: number,
  state: string,
  inactive: boolean,
  isDeleted: boolean,
  projects: [
    "string"
  ]
}
export interface UserInProject {
  id: number,
  userId: number,
  projectId: number,
  readOnly: boolean,
  project: string
  //userDataResponseModel: UserDataResponseModel[],
  userDataResponseModel: any,
}

export interface UserDataResponseModel {
  id: number,
  fullName: string,
  email: string,
  userName: string,
  imageProfilePath: string,
}

export interface ToBookMark {
  bookmarkedElementId: number,
  bookmarkedElementType: string;
}

export interface TypeItem {
  Projects: string,
  Workflow: string,
  Tasks: string,
  Milestones: string
}


export interface CreateProjectSelect {
  label: string | number,
  value: string | number
}

export interface SelectReport {
  label: string,
  value: string,
}


export interface DataViewProps {
  dataCard: CardProps[],
  isLoading: boolean,
  typeItem?: string,
  dataFiltered?: Projects[],
  isFiltered?: boolean,
  recordsCount?: number,
  fetchThunk?: any,
  onChangeLazy: any,
  lazy: Lazy,
  parentId?: string,
  from?: string,
  activeWorkflowTypePlus?: number,
}


export interface DataScrollerProps {
  dataCard: CardProps[],
  isLoading: boolean,
  typeItem: string,
  typeState: string,
  recordsCount?: number,
  fetchThunk?: any,
  onChangeLazy: any,
  lazy: Lazy,
}

export interface CardProps {
  tasksAssignees?: GlobalAssignee[];
  milestonesAssignees?: GlobalAssignee[];
  workFlowsAssignees?: GlobalAssignee[];
  usersInProjects?: GlobalAssignee[];
  taskParentId?: number;
  sort?(arg0: (a: any, b: any) => number): unknown;
  title?: string,
  projectName: string,
  projectId?: number,
  typeItem?: string,
  id: number,
  stateId: number,
  priorityId: number,
  description?: string,
  image?: string,
  plannedEndDate: Date,
  plannedStartDate?: Date,
  workFlowId?: number,
  creationDate?: Date,
  assignedTo?: number,
  recordGoals?: number,
  countFilledForms?: number,
  isCase?: boolean,
  createdBy?: number,
}




// Generated by https://quicktype.io

export interface ProjectFunders {
  id:        number;
  name:      string;
  isDeleted: boolean;
}

// Generated by https://quicktype.io

export interface Initiative {
  id:        number;
  name:      string;
  isDeleted: boolean;
}

export interface ProjectFunder {
  id: number;
  name: string;
  isDeleted: boolean;
}

export interface ProjectInitiative {
  id: number;
  name: string;
  isDeleted: boolean;
}

export interface FunderContacts {
  id: number;
  funderId: number;
  name: string;
  phone?: string;
  email?: string;
  isDeleted: boolean;
}

export interface crudEntity {
  name: string;
  id: number;
}

export interface entityProps{
  entityType: string; 
  id: number; 
  name: string;
}

export interface OverlayCRUDProps {
  field: string;
  visible: boolean;
  setVisible: (state:boolean)=>void;
  setCrudEntity : (props: entityProps) => void;
  funderId?: number;
}

export interface ProjectAssignees {
  id: number;
  fullName: string;
  userName: string;
  email: string;
  imageProfilePath: string;
  readOnly:boolean;
}

export interface FundercontactInProject
{
  id: number;
  funderContactId: number,
  projectId: number,
  funderContact: FunderContacts
}

